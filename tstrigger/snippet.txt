	/*
	cfg := &ClusterConfig{
		Hosts:                  hosts,
		CQLVersion:             "3.0.0",
		ProtoVersion:           2,
		Timeout:                600 * time.Millisecond,
		Port:                   9042,
		NumConns:               2,
		Consistency:            Quorum,
		MaxPreparedStmts:       defaultMaxPreparedStmts,
		MaxRoutingKeyInfo:      1000,
		PageSize:               5000,
		DefaultTimestamp:       true,
		MaxWaitSchemaAgreement: 60 * time.Second,
		ReconnectInterval:      60 * time.Second,
	}


	// connect to the cluster
	cluster := gocql.NewCluster("localhost")
	cluster.Keyspace = "example"
	cluster.Consistency = gocql.Quorum
	session, _ := cluster.CreateSession()
	defer session.Close()

	// insert a tweet
	if err := session.Query(`INSERT INTO tweet (timeline, id, text) VALUES (?, ?, ?)`,
		"me", gocql.TimeUUID(), "hello world").Exec(); err != nil {
		log.Fatal(err)
	}

type ClusterConfig struct {
    Hosts             []string          // addresses for the initial connections
    CQLVersion        string            // CQL version (default: 3.0.0)
    ProtoVersion      int               // version of the native protocol (default: 2)
    Timeout           time.Duration     // connection timeout (default: 600ms)
    Port              int               // port (default: 9042)
    Keyspace          string            // initial keyspace (optional)
    NumConns          int               // number of connections per host (default: 2)
    Consistency       Consistency       // default consistency level (default: Quorum)
    Compressor        Compressor        // compression algorithm (default: nil)
    Authenticator     Authenticator     // authenticator (default: nil)
    RetryPolicy       RetryPolicy       // Default retry policy to use for queries (default: 0)
    SocketKeepalive   time.Duration     // The keepalive period to use, enabled if > 0 (default: 0)
    MaxPreparedStmts  int               // Sets the maximum cache size for prepared statements globally for gocql (default: 1000)
    MaxRoutingKeyInfo int               // Sets the maximum cache size for query info about statements for each session (default: 1000)
    PageSize          int               // Default page size to use for created sessions (default: 5000)
    SerialConsistency SerialConsistency // Sets the consistency for the serial part of queries, values can be either SERIAL or LOCAL_SERIAL (default: unset)
    SslOpts           *SslOptions
    DefaultTimestamp  bool // Sends a client side timestamp for all requests which overrides the timestamp at which it arrives at the server. (default: true, only enabled for protocol 3 and above)
    // PoolConfig configures the underlying connection pool, allowing the
    // configuration of host selection and connection selection policies.
    PoolConfig PoolConfig

    // If not zero, gocql attempt to reconnect known DOWN nodes in every ReconnectSleep.
    ReconnectInterval time.Duration

    // The maximum amount of time to wait for schema agreement in a cluster after
    // receiving a schema change frame. (deault: 60s)
    MaxWaitSchemaAgreement time.Duration

    // HostFilter will filter all incoming events for host, any which don't pass
    // the filter will be ignored. If set will take precedence over any options set
    // via Discovery
    HostFilter HostFilter

    // If IgnorePeerAddr is true and the address in system.peers does not match
    // the supplied host by either initial hosts or discovered via events then the
    // host will be replaced with the supplied address.
    //
    // For example if an event comes in with host=10.0.0.1 but when looking up that
    // address in system.local or system.peers returns 127.0.0.1, the peer will be
    // set to 10.0.0.1 which is what will be used to connect to.
    IgnorePeerAddr bool

    // If DisableInitialHostLookup then the driver will not attempt to get host info
    // from the system.peers table, this will mean that the driver will connect to
    // hosts supplied and will not attempt to lookup the hosts information, this will
    // mean that data_centre, rack and token information will not be available and as
    // such host filtering and token aware query routing will not be available.
    DisableInitialHostLookup bool

    // Configure events the driver will register for
    Events struct {
        // disable registering for status events (node up/down)
        DisableNodeStatusEvents bool
        // disable registering for topology events (node added/removed/moved)
        DisableTopologyEvents bool
        // disable registering for schema events (keyspace/table/function removed/created/updated)
        DisableSchemaEvents bool
    }

    // DisableSkipMetadata will override the internal result metadata cache so that the driver does not
    // send skip_metadata for queries, this means that the result will always contain
    // the metadata to parse the rows and will not reuse the metadata from the prepared
    // statement.
    //
    // See https://issues.apache.org/jira/browse/CASSANDRA-10786
    DisableSkipMetadata bool
    // contains filtered or unexported fields
}
	func Connect(host *HostInfo, addr string, cfg *ConnConfig,
		errorHandler ConnErrorHandler, session *Session) (*Conn, error)

	*/
