package main

// https://golang.org/pkg/encoding/xml/#example_Unmarshal

// http://blog.davidsingleton.org/parsing-huge-xml-files-with-go/

import (
	"encoding/xml"
//	"fmt"
	"time"
	"log"
	"os"
	"fmt"
	"flag"
	"path/filepath"
	"strings"
)

var inputFile = flag.String("infile", "/Users/ivo/gowork/src/github.com/ivost/hello/test.xml", "Input file path")

var data = `
		<Person>
			<FullName>Grace R. Emlin</FullName>
			<Company>Example Inc.</Company>
			<Email where="home">
				<Addr>gre@example.com</Addr>
			</Email>
			<Email where='work'>
				<Addr>gre@work.com</Addr>
			</Email>
			<Group>
				<Value>Friends</Value>
				<Value>Squash</Value>
			</Group>
			<City>Hanga Roa</City>
			<State>Easter Island</State>
		</Person>
	`

func main() {
	flag.Parse()

	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		log.Fatal(err)
	}
	log.Println(dir)

	start := time.Now()
	test1();
	//elapsed := time.Since(start)
	log.Printf("test1 took %s", time.Since(start))
	start = time.Now()
	test2();
	//elapsed := time.Since(start)
	log.Printf("test2 took %s", time.Since(start))
}

func test1() {
	type Email struct {
		Where string `xml:"where,attr"`
		Addr  string
	}
	type Address struct {
		City, State string
	}
	type Result struct {
		XMLName xml.Name `xml:"Person"`
		Name    string   `xml:"FullName"`
		Phone   string
		Email   []Email
		Groups  []string `xml:"Group>Value"`
		Address
	}

	v := Result{Name: "none", Phone: "none"}

	err := xml.Unmarshal([]byte(data), &v)
	if err != nil {
		log.Printf("error: %v", err)
		return
	}

	log.Printf("XMLName: %#v\n", v.XMLName)
	log.Printf("Name: %q\n", v.Name)
	log.Printf("Phone: %q\n", v.Phone)
	log.Printf("Email: %v\n", v.Email)
	log.Printf("Groups: %v\n", v.Groups)
	log.Printf("Address: %v\n", v.Address)
}

func test2() {

	xmlFile, err := os.Open(*inputFile)
	if err != nil {
		fmt.Println("Error opening file:", err)
		return
	}
	defer xmlFile.Close()

	decoder := xml.NewDecoder(xmlFile)

	for {
		// Read tokens from the XML document in a stream.
		t, _ := decoder.Token()
		if t == nil {
			break
		}
		// Inspect the type of the token just read.
		switch se := t.(type) {
		case xml.StartElement:
			log.Printf("start element: %v", se.Name.Local)
		case xml.CharData:
			s := string([]byte(se))
			s = strings.TrimSpace(s)
			if len(s) > 0 {
				log.Printf("value: %v", s)
			}
		case xml.EndElement:
			//log.Printf("end element: %v", se)
		default:
			//log.Printf("t %v", string( ([] byte) t))

		// If we just read a StartElement token
		// ...and its name is "page"
		//if se.Name.Local == "page" {
		//	var p Page
		//	// decode a whole chunk of following XML into the
		//	// variable p which is a Page (se above)
		//	decoder.DecodeElement(&p, &se)
		//	// Do some stuff with the page.
		//	p.Title = CanonicalizeTitle(p.Title)
		//}
		}
	}
}

//import (
//	"fmt"
//	"github.com/ivost/stringutil"
////	"io/ioutil"
//	)
//
//func main() {
//  fmt.Println("Hello, Ivo");
//  fmt.Println(stringutil.Reverse("neveroddoreven"))
//  /*
//  qrcode := GenerateQRCode("07-28-1957")
//  ioutil.writeFile("qrcode.png", qrcode, 0644)
//  */
//}
