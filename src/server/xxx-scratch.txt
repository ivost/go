package main

import (
	"fmt"
	"log"
	"net/http"
	//"sync"
	//"strconv"
	"html/template"
	"os"
	"io"
	//"time"
	//"crypto/md5"
	//"strconv"
)

func main() {

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {

		fmt.Printf("%s\n", r.RequestURI)
		file := r.URL.Path[1:]
		if file == "/" {
			file = "index.html"
		}
		http.ServeFile(w, r, file)
	})

	http.HandleFunc("/login", login)
	http.HandleFunc("/upload", upload)

	log.Fatal(http.ListenAndServe(":8081", nil))

}

func login(w http.ResponseWriter, r *http.Request) {
	fmt.Println("login - method:", r.Method)
	if r.Method == "GET" {
		//t, _ := template.ParseFiles("index.html")
		//t.Execute(w, nil)
	} else {
		r.ParseForm()
		user := template.HTMLEscapeString(r.Form.Get("user"))
		pass := template.HTMLEscapeString(r.Form.Get("pass"))
		fmt.Fprintf(w, "User: %s", user)
		fmt.Println("username:", user)
		fmt.Println("password:", pass)
	}
}

func upload(w http.ResponseWriter, r *http.Request) {
	fmt.Println("upload - method:", r.Method)
	if r.Method != "POST" {
		return
	}

	r.ParseMultipartForm(32 << 20)
	file, handler, err := r.FormFile("file")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer file.Close()

	//fmt.Fprintf(w, "%v", handler.Header)
	fmt.Fprintf(w, "File uploaded")

	f, err := os.OpenFile("./data/"+handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer f.Close()
	io.Copy(f, file)
}

//var counter int
//var mutex = &sync.Mutex{}
//func echoString(w http.ResponseWriter, r *http.Request) {
//	fmt.Fprintf(w, "hello")
//}
//
//func incrementCounter(w http.ResponseWriter, r *http.Request) {
//	mutex.Lock()
//	counter++
//	fmt.Fprintf(w, strconv.Itoa(counter))
//	mutex.Unlock()
//}

<!--<form class="form-inline" action="/login" method="post">-->
<!--<div class="form-group">-->
<!--<label for="user">User name</label>-->
<!--<input type="text" class="form-control" id="user" name="user">-->
<!--</div>-->
<!--<input type="hidden" name="token" value="{{.}}"/>-->
<!--<div class="form-group">-->
<!--<label for="pass">Password:</label>-->
<!--<input type="password" class="form-control" id="pass" name="pass">-->
<!--</div>-->
<!--<button type="submit" class="btn btn-primary">Submit</button>-->
<!--</form>-->


func readfile() {
	file, err := os.Open("/path/to/file.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		fmt.Println(scanner.Text())
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
}
	//// file line by line
	//reader := bufio.NewReader(file)
	//for {
	//	if line, err := reader.ReadString('\n'); err == nil {
	//		log.Printf("row: %s\n", line)
	//	} else {
	//		log.Println(err)
	//		break
	//	}
	//}

	//scanner := bufio.NewScanner(file)
	//for scanner.Scan() {
	//	log.Printf("row: %s\n", scanner.Text())
	//}

	//if err := scanner.Err(); err != nil {
	//	log.Fatal(err)
	//}


	for i := 0; i < 30; i++ {
		// \r on mac - will be included in line
		line, err := reader.ReadString(lineEnd)
		line = line[:len(line)-1]
		if err != nil {
			log.Printf("err: %v\n", err)
			break
		}
		//if prefix {
		//	log.Printf("prefix: %v\n", prefix)
		//}

		log.Printf("line: %v", line)
	}


// ReadCSV gives shows some examples of processing CSV
// that is passed in as an io.Reader
//func ReadCSV(b io.Reader) ([]Offer, error) {
func ReadCSV(b io.Reader) (error) {

	r := csv.NewReader(b)

	// These are some optional configuration options
	r.Comma = '\t'
	r.Comment = '-'

	//var offers []Offer

	//for i := 0; i < 30; i++ {
	//	// \r on mac - will be included in line
	//	line, err := reader.ReadString(lineEnd)
	//	line = line[:len(line)-1]
	//	if err != nil {
	//		log.Printf("err: %v\n", err)
	//		break
	//	}
	//	//if prefix {
	//	//	log.Printf("prefix: %v\n", prefix)
	//	//}
	//
	//	log.Printf("line: %v", line)
	//}

	// grab and ignore the header for now
	// we may also wanna use this for a dictionary key or
	// some other form of lookup
	record, err := r.Read()
	log.Printf("record: %v\n ", record)
	if err != nil && err != io.EOF {
		//return nil, err
		return err
	}

	// loop until it's all processed
	//for {
	//	record, err := r.Read()
	//	if err == io.EOF {
	//		break
	//	} else if err != nil {
	//		return nil, err
	//	}
	//
	//	//year, err := strconv.ParseInt(record[2], 10,
	//	//	64)
	//	//if err != nil {
	//	//	return nil, err
	//	//}
	//
	//	m := Offer{record[0], record[1], int(year)}
	//	offers = append(offers, m)
	//}

	for {
		record, err := r.Read()
		log.Println("record:", record)
		log.Println("err:", err)
		if err == io.EOF {
			log.Println("EOF")
			break
		}
		if err != nil {
			if pe, ok := err.(*csv.ParseError); ok {
				log.Println("bad column:", pe.Column)
				log.Println("bad line:", pe.Line)
				log.Println("Error reported", pe.Err)
				if pe.Err == csv.ErrFieldCount {
					continue
				}
			}
			//log.Fatal(err)
		}
	}
	// return offers, nil
		return nil
}

	// These are the first two rows.
	row1 := []string{"a", "b"}
	row2 := []string{"c", "d"}
	res = append(res, row1)
	res = append(res, row2)

	// res := make([][]string, 10, 20)
	//res[0][0] = "a"
	//res[0][1] = "b"
